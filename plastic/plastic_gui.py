from datetime import datetimeimport flet as ftfrom calculations.plastic_calc import main_calcfrom data import MAIN_DATAfrom list_orders import ORDERSfrom other_func import card, checking_size, checking_quantity, load_files, create_comments_and_layout_files_fields, \    create_general_paramsfrom plastic.result_gui import result_contentclass PlasticElements:    def __init__(self):        self.material = None        self.color_material = None        self.print_quality = None        self.processing = None        self.lamination = None        self.lamination_divider = None        self.sampling_method = None        self.sampling_complexity = None        self.mounting_plastic = None        self.card_material = None        self.card_process = None        self.name = None        self.divider_down = None        self.divider_top = None    def visible_material_fields(self):        fields_data = MAIN_DATA['Плёнка']['Материал'][self.material.value]        self.print_quality.visible = False        self.color_material.visible = False        if 'Качество печати' in fields_data:            options_print = list(fields_data['Качество печати'].keys())            self.print_quality.options = [                ft.dropdown.Option(quality) for quality in options_print            ]            self.print_quality.value = options_print[0]            self.print_quality.visible = True        if 'Цвет' in fields_data:            self.color_material.visible = True        lamination = fields_data.get('Ламинация')        if lamination:            self.lamination.visible = lamination            self.lamination_divider.visible = lamination        else:            self.lamination.visible = True            self.lamination_divider.visible = True    def create_elements_material(self):        material_choices = list(MAIN_DATA['Плёнка']['Материал'].keys())        default_material = material_choices[0]        self.material = ft.Dropdown(            label="Материал плёнки",            options=[                ft.dropdown.Option(material) for material in material_choices            ],            value=default_material,            alignment=ft.alignment.center,        )        self.print_quality = ft.Dropdown(            label="Качество печати",            options=[],            value=None,            alignment=ft.alignment.center,            visible=False        )        self.color_material = ft.TextField(            label="Цвет плёнки",            visible=False        )        self.card_material = card('Материал', [self.material, self.print_quality, self.color_material])        return self.card_material    def create_elements_processing(self):        lamination_choices = list(MAIN_DATA['Плёнка']["Обработка"]['Ламинация'].keys())        self.lamination = ft.Dropdown(            label="Ламинация",            options=[                ft.dropdown.Option(choice) for choice in lamination_choices            ],            value=lamination_choices[0],            alignment=ft.alignment.center,        )        self.lamination_divider = ft.Divider()        processing_choices = list(MAIN_DATA['Плёнка']["Обработка"]["Вид обработки"].keys())        self.processing = ft.Dropdown(            label="Вид обработки",            options=[                ft.dropdown.Option(choice) for choice in processing_choices            ],            value=processing_choices[0],            alignment=ft.alignment.center,        )        self.sampling_method = ft.Dropdown(            label="Вид выборки",            options=[],            value=None,            alignment=ft.alignment.center,            visible=False        )        self.sampling_complexity = ft.Dropdown(            label='Сложность выборки',            options=[],            value=None,            alignment=ft.alignment.center,            visible=False        )        mounting_choices = list(            MAIN_DATA['Плёнка']["Обработка"]["Вид обработки"]['Плоттер']['Монтажная пленка'].keys()        )        self.mounting_plastic = ft.Dropdown(            label="Монтажная пленка",            options=[                ft.dropdown.Option(choice) for choice in mounting_choices            ],            value=mounting_choices[0],            alignment=ft.alignment.center,            visible=False        )        self.card_process = card(            "Обработка",            [                self.processing,                self.sampling_method,                self.sampling_complexity,                self.mounting_plastic,                self.lamination_divider,                self.lamination            ]        )        return self.card_process    def visible_processing_fields(self):        fields_data = MAIN_DATA['Плёнка']['Обработка']['Вид обработки'][self.processing.value]        self.sampling_method.visible = False        self.sampling_complexity.visible = False        self.mounting_plastic.visible = False        if "Вид выборки" in fields_data:            data_sampling = fields_data['Вид выборки']            options_sampling = list(data_sampling.keys())            self.sampling_method.options = [                ft.dropdown.Option(choice) for choice in options_sampling            ]            self.sampling_method.value = options_sampling[0]            self.sampling_method.visible = True            data_complexity = data_sampling[options_sampling[0]]            if 'Сложность выборки' in data_complexity:                options_complexity = list(data_complexity['Сложность выборки'].keys())                self.sampling_complexity.options = [                    ft.dropdown.Option(choice) for choice in options_complexity                ]                self.sampling_complexity.value = options_complexity[0]                self.sampling_complexity.visible = True        if 'Монтажная пленка' in fields_data:            self.mounting_plastic.visible = True    def visible_sampling_func(self, event):        self.sampling_complexity.visible = False        sampling = MAIN_DATA['Плёнка']['Обработка']['Вид обработки'][self.processing.value].get('Вид выборки')        if sampling and "Сложность выборки" in sampling[event.control.value]:            options_complexity = list(sampling[event.control.value]["Сложность выборки"].keys())            self.sampling_complexity.options = [                ft.dropdown.Option(choice) for choice in options_complexity            ]            self.sampling_complexity.value = options_complexity[0]            self.sampling_complexity.visible = True    def checking_values_elems(self):        checked_var = True        if self.color_material.visible and not self.color_material.value:            if not self.color_material.error_text:                self.color_material.error_text = 'Введите цвет композита'            checked_var = False        return checked_var    def visible_elems(self, check):        for elem in (self.divider_top, self.divider_down, self.name, self.card_material, self.card_process):            if elem:                elem.visible = check    def create_data_elems(self) -> dict:        attributes_to_check = {            self.color_material: 'color_material',            self.lamination: 'lamination',            self.sampling_method: 'sampling_method',            self.sampling_complexity: 'sampling_complexity',            self.mounting_plastic: 'mounting_plastic',            self.print_quality: 'print_quality'        }        add_data = {}        for attribute, key in attributes_to_check.items():            if not attribute.visible:                add_data[key] = None            else:                add_data[key] = attribute.value        return {            'material': {                'name': self.material.value,                'print_quality': add_data['print_quality'],                'color_material': add_data['color_material'],            },            'processing': {                'lamination': add_data['lamination'],                'processing': self.processing.value,                'sampling_method': add_data['sampling_method'],                'sampling_complexity': add_data['sampling_complexity'],                'mounting_plastic': add_data['mounting_plastic']            }        }class PlasticGUI(ft.UserControl, PlasticElements):    def __init__(self, page, main_price, main_sale_price, coefficient):        super().__init__()        self.page = page        self.main_price, self.main_sale_price, self.coefficient = main_price, main_sale_price, coefficient        self.height_plastic = None        self.width_plastic = None        self.quantity = None        self.button_send = None        self.load_file_btn = None        self.load_file_text = None        self.pick_files_dialog = ft.FilePicker(on_result=self.load_file)        self.page.overlay.append(self.pick_files_dialog)        self.page.update()        self.upload_files = []        self.comment_field_1, self.comment_field_2 = None, None    def material_func(self, _event):        self.visible_material_fields()        self.update()    def load_file(self, e: ft.FilePickerResultEvent):        self.load_file_text.value, self.upload_files = load_files(e, "Макет_Пленки")        self.update()    def color_material_func(self, _event):        if self.color_material and self.color_material.value:            self.color_material.error_text = ''        self.update()    def material_card(self):        card_material = self.create_elements_material()        self.material.on_change = self.material_func        self.color_material.on_change = self.color_material_func        return card_material    def processing_func(self, _event):        self.visible_processing_fields()        self.update()    def sampling_func(self, event):        self.visible_sampling_func(event)        self.update()    def processing_card(self):        card_process = self.create_elements_processing()        self.lamination.on_change = self.processing_func        self.processing.on_change = self.processing_func        self.sampling_method.on_change = self.sampling_func        return card_process    def checking_size(self, event):        checking_size(event)        self.update()    def checking_quantity(self, event):        checking_quantity(event)        self.update()    def create_fields_general_params(self):        self.width_plastic, self.height_plastic, self.quantity = (            create_general_params()        )        self.width_plastic.on_change = self.checking_size        self.height_plastic.on_change = self.checking_size        self.quantity.on_change = self.checking_quantity        card_params = card(            'Общие параметры',            [                self.width_plastic,                self.height_plastic,                self.quantity            ]        )        card_comments, contents = create_comments_and_layout_files_fields()        self.comment_field_1, self.comment_field_2, self.load_file_text, self.load_file_btn = contents        self.load_file_btn.on_click = lambda _: self.pick_files_dialog.pick_files(            allow_multiple=True        )        return card_params, card_comments    def create_fields(self):        column_controls = [            ft.Row(                [ft.Text('Плёнка', size=25)],                alignment=ft.MainAxisAlignment.CENTER,                spacing=10            ),            self.material_card(),            self.processing_card()        ]        column_controls.extend(self.create_fields_general_params())        self.button_send = ft.ElevatedButton(            'Рассчитать',            style=ft.ButtonStyle(                padding={ft.MaterialState.DEFAULT: 20}, bgcolor=ft.colors.AMBER, color=ft.colors.BLACK            ),            on_click=self.checking_entered_values        )        column_controls.append(self.button_send)        self.visible_material_fields()        self.visible_processing_fields()        return column_controls    def create_data(self):        data = self.create_data_elems()        if isinstance(data, dict):            if self.upload_files:                data['upload_files'] = ", ".join(self.upload_files)            else:                data['upload_files'] = 'Файлы не добавлены'            list_comments = []            for comment in [self.comment_field_1, self.comment_field_2]:                if self.comment_field_1.value:                    comment = comment.value                else:                    comment = "Нет"                list_comments.append(comment)            data['comments'] = list_comments            data.update(                {                    'height': self.height_plastic.value,                    'width': self.width_plastic.value,                    'quantity': self.quantity.value                }            )        else:            raise TypeError()        return data    def checking_entered_values(self, _event):        checked_var = self.checking_values_elems()        if self.height_plastic.error_text or self.width_plastic.error_text or self.quantity.error_text:            checked_var = False        else:            for elem in [self.height_plastic, self.width_plastic, self.quantity]:                if not elem.value:                    elem.error_text = 'Не может быть пустым'                    checked_var = False        if not checked_var:            self.page.banner.open = True            self.page.update()        else:            data = main_calc(self.create_data())            self.main_price.text = f"{data['main_price']}\xa0₽"            self.main_sale_price.text = f"{data['main_sale_price']}\xa0₽"            self.coefficient.text = data['coefficient']            self.page.dialog.content = result_content(data)            ORDERS[f'Плёнка - {datetime.now().strftime("%d.%m.%Y (%H:%M:%S)")}'] = data            data['result_content'] = 'plastic'            self.page.dialog.open = True            self.page.banner.open = False            self.page.update()        self.update()    def build(self):        self.create_fields()        return ft.Container(            content=ft.Column(                controls=self.create_fields(),                spacing=20,                scroll=ft.ScrollMode.AUTO,                horizontal_alignment=ft.CrossAxisAlignment.CENTER            ),            padding=20,            margin=10,            width=500        )